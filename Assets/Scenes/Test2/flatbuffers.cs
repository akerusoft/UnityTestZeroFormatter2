// automatically generated by the FlatBuffers compiler, do not modify

namespace MyFlatBuffers
{

using System;
using FlatBuffers;

public enum Data : byte
{
 NONE = 0,
 MonsterDataV1 = 1,
};

public sealed class Root : Table {
  public static Root GetRootAsRoot(ByteBuffer _bb) { return GetRootAsRoot(_bb, new Root()); }
  public static Root GetRootAsRoot(ByteBuffer _bb, Root obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RootBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MYFI"); }
  public Root __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public Data DataType { get { int o = __offset(4); return o != 0 ? (Data)bb.Get(o + bb_pos) : Data.NONE; } }
  public TTable GetData<TTable>(TTable obj) where TTable : Table { int o = __offset(6); return o != 0 ? __union(obj, o) : null; }

  public static Offset<Root> CreateRoot(FlatBufferBuilder builder,
      Data data_type = Data.NONE,
      int dataOffset = 0) {
    builder.StartObject(2);
    Root.AddData(builder, dataOffset);
    Root.AddDataType(builder, data_type);
    return Root.EndRoot(builder);
  }

  public static void StartRoot(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddDataType(FlatBufferBuilder builder, Data dataType) { builder.AddByte(0, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(1, dataOffset, 0); }
  public static Offset<Root> EndRoot(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Root>(o);
  }
  public static void FinishRootBuffer(FlatBufferBuilder builder, Offset<Root> offset) { builder.Finish(offset.Value, "MYFI"); }
};

public sealed class MonsterDataV1 : Table {
  public static MonsterDataV1 GetRootAsMonsterDataV1(ByteBuffer _bb) { return GetRootAsMonsterDataV1(_bb, new MonsterDataV1()); }
  public static MonsterDataV1 GetRootAsMonsterDataV1(ByteBuffer _bb, MonsterDataV1 obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public MonsterDataV1 __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string Name { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __vector_as_arraysegment(4); }
  public uint Hp { get { int o = __offset(6); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public float HitRate { get { int o = __offset(8); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public uint Speed { get { int o = __offset(10); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint Luck { get { int o = __offset(12); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }

  public static Offset<MonsterDataV1> CreateMonsterDataV1(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      uint hp = 0,
      float hitRate = 0.0f,
      uint speed = 0,
      uint luck = 0) {
    builder.StartObject(5);
    MonsterDataV1.AddLuck(builder, luck);
    MonsterDataV1.AddSpeed(builder, speed);
    MonsterDataV1.AddHitRate(builder, hitRate);
    MonsterDataV1.AddHp(builder, hp);
    MonsterDataV1.AddName(builder, nameOffset);
    return MonsterDataV1.EndMonsterDataV1(builder);
  }

  public static void StartMonsterDataV1(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddHp(FlatBufferBuilder builder, uint hp) { builder.AddUint(1, hp, 0); }
  public static void AddHitRate(FlatBufferBuilder builder, float hitRate) { builder.AddFloat(2, hitRate, 0.0f); }
  public static void AddSpeed(FlatBufferBuilder builder, uint speed) { builder.AddUint(3, speed, 0); }
  public static void AddLuck(FlatBufferBuilder builder, uint luck) { builder.AddUint(4, luck, 0); }
  public static Offset<MonsterDataV1> EndMonsterDataV1(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MonsterDataV1>(o);
  }
};

public sealed class MonsterDataV2 : Table {
  public static MonsterDataV2 GetRootAsMonsterDataV2(ByteBuffer _bb) { return GetRootAsMonsterDataV2(_bb, new MonsterDataV2()); }
  public static MonsterDataV2 GetRootAsMonsterDataV2(ByteBuffer _bb, MonsterDataV2 obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public MonsterDataV2 __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string Name { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __vector_as_arraysegment(4); }
  public uint Hp { get { int o = __offset(6); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public float HitRate { get { int o = __offset(8); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public uint Speed { get { int o = __offset(10); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint Luck { get { int o = __offset(12); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public uint Defence { get { int o = __offset(14); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }

  public static Offset<MonsterDataV2> CreateMonsterDataV2(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      uint hp = 0,
      float hitRate = 0.0f,
      uint speed = 0,
      uint luck = 0,
      uint defence = 0) {
    builder.StartObject(6);
    MonsterDataV2.AddDefence(builder, defence);
    MonsterDataV2.AddLuck(builder, luck);
    MonsterDataV2.AddSpeed(builder, speed);
    MonsterDataV2.AddHitRate(builder, hitRate);
    MonsterDataV2.AddHp(builder, hp);
    MonsterDataV2.AddName(builder, nameOffset);
    return MonsterDataV2.EndMonsterDataV2(builder);
  }

  public static void StartMonsterDataV2(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddHp(FlatBufferBuilder builder, uint hp) { builder.AddUint(1, hp, 0); }
  public static void AddHitRate(FlatBufferBuilder builder, float hitRate) { builder.AddFloat(2, hitRate, 0.0f); }
  public static void AddSpeed(FlatBufferBuilder builder, uint speed) { builder.AddUint(3, speed, 0); }
  public static void AddLuck(FlatBufferBuilder builder, uint luck) { builder.AddUint(4, luck, 0); }
  public static void AddDefence(FlatBufferBuilder builder, uint defence) { builder.AddUint(5, defence, 0); }
  public static Offset<MonsterDataV2> EndMonsterDataV2(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MonsterDataV2>(o);
  }
};


}
